#const onto="examples/koala/koala-meta.json".

% make 3 alternative ontologies (we test adding assertions of all 3 kinds):
% * qalt: we check which animals could be quokkas
% * rfalt: we check which entities could have their habitat in the rain forest
% * hwalt: we check which entities could be hard working

% guess which animal could be a tasmanian devil (lisa can be)
{ makequokka(A) } :- &dlCro[onto,"koala:Animal"](A), not &dlCro[onto,"koala:Person"](A).
delta(qalt,addc("koala:TasmanianDevil",A)) :- makequokka(A).

% guess which entity can have habitat in the university (franz and silvia can have)
{ makeuniversity(T) } :- &dlCro[onto,"koala:Animal"](T).
delta(rfalt,addop("koala:hasHabitat",T,"koalaex:tuwien")) :- makeuniversity(T).

% guess which entity is hard-working (silvia can be)
{ makehardworking(T) } :- &dlCro[onto,"koala:Animal"](T).
delta(hwalt,adddp("koala:isHardWorking",A,true)) :- makehardworking(A).

% declare which modifications we consider
modifications(qalt;rfalt;hwalt).

% require that the result is consistent
:- not &dlConsistent[onto,delta,ID], modifications(ID).

hdelta(M,addc(A',B')) :- delta(M,addc(A,B)),
   &dlSimplifyIRI[onto,A](A'), &dlSimplifyIRI[onto,B](B').
hdelta(M,addop(A',B',C')) :- delta(M,addop(A,B,C)),
   &dlSimplifyIRI[onto,A](A'), &dlSimplifyIRI[onto,B](B'), &dlSimplifyIRI[onto,C](C').
hdelta(M,adddp(A',B',C)) :- delta(M,adddp(A,B,C)),
   &dlSimplifyIRI[onto,A](A'), &dlSimplifyIRI[onto,B](B').

% The result should be 16 answer sets

#show.
#show hdelta/2.
